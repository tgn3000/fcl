file(GLOB_RECURSE FCL_SOURCE_CODE ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
if(FCL_STATIC_LIBRARY)
  add_library(${PROJECT_NAME} STATIC ${FCL_HEADERS} ${FCL_SOURCE_CODE})
else()
  add_library(${PROJECT_NAME} SHARED ${FCL_HEADERS} ${FCL_SOURCE_CODE})
endif()

set_target_properties(${PROJECT_NAME} PROPERTIES
  VERSION ${FCL_VERSION}
  SOVERSION ${FCL_ABI_VERSION})

# temporary check for OCTOMAP for cmake 2.8.11...
if (FCL_HAVE_OCTOMAP)
  target_link_libraries(${PROJECT_NAME}
    LINK_PUBLIC ${OCTOMAP_LIBRARIES}
    LINK_PRIVATE ${CCD_LIBRARIES}
    LINK_PRIVATE ${Boost_LIBRARIES})
else ()
  target_link_libraries(${PROJECT_NAME}  ${CCD_LIBRARIES}  ${Boost_LIBRARIES})
endif()

target_include_directories(${PROJECT_NAME} INTERFACE
  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include>)

# export(TARGETS ${PROJECT_NAME}
#   FILE "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake")

install(TARGETS ${PROJECT_NAME}
  EXPORT ${PROJECT_NAME}Config
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

if(WIN32 AND NOT CYGWIN)
  install(EXPORT ${PROJECT_NAME}Config DESTINATION CMake)
else()
  # install(EXPORT ${PROJECT_NAME}Config DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})
endif()

# Setup the coveralls target and tell it to gather coverage data for all the lib sources.
if(FCL_COVERALLS)
  coveralls_setup("${FCL_HEADERS};${FCL_SOURCE_CODE};" ${FCL_COVERALLS_UPLOAD})
endif()
